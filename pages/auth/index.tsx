import Head from 'next/head'
import React, { useState } from 'react'
import Navbar from '../../components/navbar'
import { AuthProvider, signInWithEmailAndPassword, signInWithPopup, signOut } from 'firebase/auth'
import { collection, doc, getDocs, onSnapshot, setDoc, updateDoc } from 'firebase/firestore'
import Link from 'next/link'
import { useRouter } from 'next/router'
// import { useNavigate,Link } from 'react-router-dom'
// import { createAccount } from '../features/Authentication'
import { authentication, db,google, facebook, twitter, github } from '../../components/lib/firebase'
import { authCollectionRef } from '@/components/lib/firebase-collection'
import { createAccount } from '@/features/Authentication'
import { useDispatch } from 'react-redux'
// import { authCollectionRef } from '../lib/firebase-collection'


const Authentication = () => {


    const dispatch = useDispatch()
    const router = useRouter()

    const [errors,setErrors] = useState({
        email_:'',
        pass_:'',
    })
    
    const [email,setEmail] = useState('')
    const [password,setPassword] = useState('')


    const handleSubmit = (e:any) => {
        e.preventDefault()

        signInWithEmailAndPassword(authentication,email,password)
        .then(res => {
            setErrors({
                email_:'',
                pass_:''
            })

            updateDoc(doc(db,`auth`,`${email}`),{
                status:"Online"
            }).then((res) => {
                router.push('/home')
            })

        })
        .catch(err => {
            const errorCode = err.code;
            console.log(errorCode)
            if ('auth/wrong-password' == errorCode) {
                setErrors({
                    email_:'',
                    pass_:'Wrong Password'
                })            
            } else if ('auth/user-not-found' == errorCode) {
                setErrors({
                    email_:'Email not found',
                    pass_:''
                })               
            } else if ('auth/invalid-email' == errorCode) {
                setErrors({
                    email_:"Invalid Email",
                    pass_:'',
                })
            }
        })
    }



    const login = async (provider: AuthProvider) => {
        await signInWithPopup(authentication, provider)
            .then(res => {
                const querySnapshot = getDocs(authCollectionRef);
                querySnapshot.then(res_ => {
                    if (res_.docs.some(e => e.data().authEmail == res.user.providerData[0].email) == false) {
                        dispatch(createAccount({
                            ownerUid:res.user.providerData[0].email,
                            authEmail:res.user.providerData[0].email,
                            authUsername:(Math.random() + 1).toString(36).substring(20),
                            status:"Online"
                        }))
                        return
                    }
                    updateDoc(doc(db,`auth`,`${res.user.providerData[0].email}`),{
                        status:"Online"
                    }).then((res) => {
                        router.push('/home')
                    })

                })
            })
            .catch(err => {console.log(err)})
    }

    return (
        <>
        <Head>
            <title> Authentication </title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar></Navbar>
        <div className='container-fluid'>
            <div className="auth-subfluid">
                <div className="auth-subcomponent">
                    <div className='auth-component'>
                        <div className="row d-flex align-items-center justify-content-center">
                            <div className="login-header col-5">
                                <p>
                                    Sign In
                                </p>
                            </div>
                        </div>
                        <form onSubmit={handleSubmit}>
                            <div className="input-form">
                                <div className="email-input">
                                    <input type="text" placeholder='Email'
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                    <h6>
                                        {errors.email_}      
                                    </h6>
                                </div>
                            </div>
                            <div className="input-form">
                                <div className="pass-input">
                                    <input type="text" placeholder='Password'
                                        value={password}
                                        onChange={e=> setPassword(e.target.value)}
                                    />
                                    <h6>
                                        {errors.pass_}      
                                    </h6>
                                </div>
                            </div>



                            <div className="button-form">
                                <button className="fg-pass regs">
                                    <div className="circle"></div>
                                    <Link href="/auth/register">
                                        Register
                                    </Link>
                                </button>
                                <button className="fg-pass">
                                    <div className="circle"></div>
                                    <Link href="/auth/forgot">
                                        Forgot Password
                                    </Link>
                                </button>
                            </div>
                            <div className="button-form slash">
                                <button className="login">
                                    Login
                                </button>
                            </div>
                        </form>

                        <div className="mid">
                            <div className="middle-form">
                                <span></span>
                                <h5>
                                    OR
                                </h5>
                                <span></span>
                            </div>
                            <div className="link-in-accounts">
                                <button className='button-links'
                                onClick={() => login(google)}>
                                    Login with Google
                                </button>
                                <button className='button-links' 
                                onClick={() => login(facebook)}>
                                    Login with Facebook
                                </button>
                                <button className='button-links' 
                                onClick={() => login(twitter)}>
                                    Login with Twitter
                                </button>
                                <button className='button-links' 
                                onClick={() => {login(github)}}>
                                    Login with GitHub
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        </>
    )
}

export default Authentication