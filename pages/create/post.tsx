import Navbar from '@/components/navbar'
import Head from 'next/head'
import React, { useRef, useState } from 'react'
import styles from '@/styles/navbar.module.scss'
import { doc, setDoc } from 'firebase/firestore';
import { db } from '@/components/lib/firebase';
import { useAccount } from '@/components/context/Account';

function generateRandomString(length: number): string {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let result = "";
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}


const Post = () => {

    const { owner } = useAccount()

    const [title,setTitle] = useState("")

    const [postImageBool,setImageBool] = useState(false)

    const [notifyPost,setNotifyPost] = useState("")

    const [editorState, setEditorState] = useState({
        bold: false,
        italic: false,
        underline: false,
        link: "",
        quote: false,
        code: false,
        content: "",
    });

    // Contents of types 
    // bold-types,italic-types,code-types,image-types,link-types
    // highlighted-types,special-types,math-types
    const [content,setContent] = useState<any[]>([])
    const [contentMain,setContentMain] = useState<any[]>(content)


    const handleBoldClick = () => {
        console.log(generateRandomString(10))
        const gen = generateRandomString(10)
        setContent([...content, { id:gen, type:'bold',size:"normal",value:"" }])
        setContentMain([...content, { id:gen, type:'bold',size:"normal",value:"" }])
    };
    const handleItalicClick = () => {
        const gen = generateRandomString(10)
        setContent([...content, { id:gen, type:'italic',size:"normal",value:"" }])
        setContentMain([...content, { id:gen, type:'italic',size:"normal",value:"" }])
    };
    const handleCodeClick = () => {
        const gen = generateRandomString(10)
        setContent([...content, { id:gen, type:'code',size:"normal",value:"" }])
        setContentMain([...content, { id:gen, type:'code',size:"normal",value:"" }])
    };
    

    const imageInputs = useRef<any>(null);
    const handleClickGalleries = (event:any) => {
        if (imageInputs.current) {
            imageInputs?.current.click();
        }
    };

    const [filesBytes, setFileBytes] = useState<any>(null)

    const handleFileUpload = (e:any) => {
        const tempArr:any[] = [];
        [...e.target.files].forEach(file => {
            tempArr.push({
                data: file,
                url: URL.createObjectURL(file),
                dataType:file.name.split('.')[1],
                name:file.name
            });
            
        });
        setFileBytes(tempArr);
    };

    const handleUploadImageClick = () => {
        const gen = generateRandomString(10)
        setImageBool(!postImageBool)
        // setContent([...content, { id:gen, type:'code',size:"normal",value:"" }])
        // setContentMain([...content, { id:gen, type:'code',size:"normal",value:"" }])
    }

    const handleAddUploadClick = () => {
        setImageBool(!postImageBool)
    }

    const handleChangeContent = (e:any,elem:any) => {
        e.preventDefault();
        setContentMain((prevContent) => {
            return prevContent.map((contentObj) => {
                if (contentObj.id === elem.id) {
                    return {
                    ...contentObj,
                    value: e.target.innerHTML,
                    };
                }
                return contentObj;
            });
        });
    }


    const submitPost = (e:any) => {
        setDoc(doc(db,`post`,`${generateRandomString(30)}`),{
            title:title,
            ownerUid:owner?.ownerUid,
            content:contentMain,
            comments:[],
            upvotes:0
        })
        .then(res => {})
        .catch(err => {})
        setContent([])
        setContentMain([])
        setNotifyPost("Have been posted!")
    }

    return (
        <>
            <Head>
                <title> Authentication </title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navbar></Navbar>
            <div className="create-component">
                {postImageBool ? <>
                    <div className="postImage">
                        <div className="post__pictures">
                            <div className="d-flex align-items-center justify-content-center"
                                ref={imageInputs}
                                onClick={handleClickGalleries}
                                onChange={handleFileUpload}
                            >
                                <svg 
                                width="30" height="28" viewBox="0 0 30 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8.44122 15.875C9.18714 15.875 9.90251 15.5787 10.43 15.0512C10.9574 14.5238 11.2537 13.8084 11.2537 13.0625C11.2537 12.3166 10.9574 11.6012 10.43 11.0738C9.90251 10.5463 9.18714 10.25 8.44122 10.25C7.6953 10.25 6.97993 10.5463 6.45248 11.0738C5.92504 11.6012 5.62872 12.3166 5.62872 13.0625C5.62872 13.8084 5.92504 14.5238 6.45248 15.0512C6.97993 15.5787 7.6953 15.875 8.44122 15.875Z" fill="white"/>
                                <path d="M26.2537 23.375C26.2537 24.3696 25.8586 25.3234 25.1554 26.0266C24.4521 26.7299 23.4983 27.125 22.5037 27.125H3.75372C2.75916 27.125 1.80533 26.7299 1.10207 26.0266C0.398811 25.3234 0.00372314 24.3696 0.00372314 23.375V8.375C0.00372265 7.38109 0.398296 6.42783 1.10075 5.72467C1.8032 5.02152 2.75606 4.62599 3.74997 4.625C3.74997 3.63044 4.14506 2.67661 4.84832 1.97335C5.55158 1.27009 6.50541 0.875 7.49997 0.875H26.25C27.2445 0.875 28.1984 1.27009 28.9016 1.97335C29.6049 2.67661 30 3.63044 30 4.625V19.625C30 20.6189 29.6054 21.5722 28.903 22.2753C28.2005 22.9785 27.2476 23.374 26.2537 23.375ZM26.25 2.75H7.49997C7.00269 2.75 6.52578 2.94754 6.17415 3.29917C5.82252 3.65081 5.62497 4.12772 5.62497 4.625H22.5037C23.4983 4.625 24.4521 5.02009 25.1554 5.72335C25.8586 6.42661 26.2537 7.38044 26.2537 8.375V21.5C26.7504 21.499 27.2263 21.301 27.5771 20.9495C27.9279 20.598 28.125 20.1216 28.125 19.625V4.625C28.125 4.12772 27.9274 3.65081 27.5758 3.29917C27.2242 2.94754 26.7473 2.75 26.25 2.75ZM3.75372 6.5C3.25644 6.5 2.77953 6.69754 2.4279 7.04918C2.07627 7.40081 1.87872 7.87772 1.87872 8.375V23.375L6.83997 18.9613C6.99322 18.8086 7.19456 18.7136 7.40986 18.6924C7.62515 18.6712 7.84115 18.7251 8.02122 18.845L13.0087 22.1694L19.965 15.2131C20.104 15.074 20.2833 14.982 20.4775 14.9504C20.6716 14.9188 20.8708 14.949 21.0468 15.0369L24.3787 18.6875V8.375C24.3787 7.87772 24.1812 7.40081 23.8295 7.04918C23.4779 6.69754 23.001 6.5 22.5037 6.5H3.75372Z" fill="white"/>
                                </svg>
                            </div>
                            <p>
                                {filesBytes?.[0].name ? filesBytes?.[0].name:'Upload Image'}
                            </p>
                            <input type="file" 
                                multiple={false}
                                ref={imageInputs}
                                onChange={handleFileUpload}
                                accept="image/*"
                                style={{display:"none"}}
                            />
                            <button onClick={handleAddUploadClick}>
                                Upload 
                            </button>
                        </div>
                    </div>
                </> : <></>}
                <div className="posting-process">
                    <div className="header-post">
                        <h5> Create a post </h5>
                    </div>
                    <div className="option-post">
                        <button className="opt">
                            <h5>
                                Choose to post
                            </h5>
                            <svg className={styles.svg_drop} width="11" height="7" viewBox="0 0 11 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4.23752 6.27083L0.445849 2.47917C-0.0159568 2.01736 -0.119012 1.48896 0.136682 0.893958C0.391404 0.297986 0.846891 0 1.50314 0H9.01356C9.66981 0 10.1253 0.297986 10.38 0.893958C10.6357 1.48896 10.5327 2.01736 10.0708 2.47917L6.27918 6.27083C6.13335 6.41667 5.97536 6.52604 5.80522 6.59896C5.63508 6.67187 5.45279 6.70833 5.25835 6.70833C5.0639 6.70833 4.88161 6.67187 4.71147 6.59896C4.54134 6.52604 4.38335 6.41667 4.23752 6.27083Z" fill="#FFE70E"/>
                            </svg>
                        </button>
                    </div>
                    <div className="format-post">
                        
                        <div className="format_opt row align-items-center justify-content-center">
                            <div className="col-3">
                                <h5> Text </h5>
                            </div>
                            <div className="col-3">
                                <h5> Image/Video </h5>
                            </div>
                            <div className="col-3">
                                <h5> Links </h5>
                            </div>
                            <div className="col-3">
                                <h5> Votings </h5>
                            </div>
                        </div>
                        <div className="format_body">
                            <div className="col-12">
                                <input 
                                    type="text" 
                                    placeholder='Title'
                                    value={title}
                                    onChange={e => setTitle(e.target.value)}
                                />
                            </div>
                            <div className="col-12 main_body">

                                {/* Format editor that will be option for typing area */}
                                <div className="format_editor">
                                    <div className="editor_opt" 
                                    onClick={handleBoldClick}
                                    >
                                        B
                                    </div>
                                    <div className="editor_opt" 
                                    onClick={handleItalicClick}
                                    >
                                        I
                                    </div>
                                    <div className="editor_opt" 
                                    onClick={handleCodeClick}
                                    >
                                        <svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M6 12L0 6L6 0L7.425 1.425L2.825 6.025L7.4 10.6L6 12ZM14 12L12.575 10.575L17.175 5.975L12.6 1.4L14 0L20 6L14 12Z" fill="white"/>
                                        </svg>
                                    </div>
                                    <div className="editor_opt" 
                                    onClick={handleUploadImageClick}
                                    >
                                        <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M20.3333 0.666626H1.66665C1.31302 0.666626 0.973886 0.807102 0.723837 1.05715C0.473789 1.3072 0.333313 1.64634 0.333313 1.99996V18C0.333313 18.3536 0.473789 18.6927 0.723837 18.9428C0.973886 19.1928 1.31302 19.3333 1.66665 19.3333H20.3333C20.6869 19.3333 21.0261 19.1928 21.2761 18.9428C21.5262 18.6927 21.6666 18.3536 21.6666 18V1.99996C21.6666 1.64634 21.5262 1.3072 21.2761 1.05715C21.0261 0.807102 20.6869 0.666626 20.3333 0.666626ZM1.66665 18V1.99996H20.3333V18H1.66665Z" fill="white"/>
                                        <path d="M4.94666 7.33337C5.34222 7.33337 5.7289 7.21608 6.0578 6.99631C6.38669 6.77655 6.64304 6.46419 6.79441 6.09874C6.94579 5.73329 6.9854 5.33116 6.90823 4.94319C6.83106 4.55523 6.64057 4.19887 6.36087 3.91916C6.08116 3.63946 5.7248 3.44897 5.33684 3.3718C4.94887 3.29463 4.54674 3.33424 4.18129 3.48562C3.81584 3.63699 3.50348 3.89334 3.28372 4.22223C3.06395 4.55113 2.94666 4.93781 2.94666 5.33338C2.94666 5.86381 3.15737 6.37252 3.53244 6.74759C3.90751 7.12266 4.41622 7.33337 4.94666 7.33337ZM4.94666 4.26671C5.1579 4.26539 5.36478 4.32682 5.54107 4.44322C5.71736 4.55963 5.85511 4.72575 5.93687 4.92054C6.01862 5.11533 6.0407 5.33 6.0003 5.53735C5.9599 5.74471 5.85884 5.93539 5.70993 6.08523C5.56102 6.23508 5.37098 6.33733 5.16388 6.37903C4.95679 6.42073 4.74198 6.4 4.54668 6.31947C4.35138 6.23893 4.1844 6.10222 4.06689 5.92667C3.94939 5.75112 3.88666 5.54462 3.88666 5.33338C3.8884 5.05279 4.00064 4.78418 4.19905 4.58577C4.39746 4.38736 4.66607 4.27512 4.94666 4.27338V4.26671Z" fill="white"/>
                                        <path d="M14.1867 8.24672L10.5867 11.8467L7.91999 9.18005C7.79508 9.05588 7.62611 8.98619 7.44999 8.98619C7.27387 8.98619 7.1049 9.05588 6.97999 9.18005L2.94666 13.2667V15.1534L7.47332 10.6267L9.66666 12.7867L7.16666 15.2867H8.99999L14.6333 9.65338L19 14.0001V12.1201L15.1267 8.24672C15.0017 8.12255 14.8328 8.05286 14.6567 8.05286C14.4805 8.05286 14.3116 8.12255 14.1867 8.24672Z" fill="white"/>
                                        </svg>
                                    </div>
                                    <div className='editor_opt'>
                                        <svg width="19" height="21" viewBox="0 0 19 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M19 16H16V13H14V16H11V18H14V21H16V18H19M2 0C1.46957 0 0.960859 0.210714 0.585786 0.585786C0.210714 0.960859 0 1.46957 0 2V18C0 19.11 0.89 20 2 20H9.81C9.45 19.38 9.2 18.7 9.08 18H2V2H9V7H14V11.08C14.33 11.03 14.67 11 15 11C15.34 11 15.67 11.03 16 11.08V6L10 0M4 10V12H12V10M4 14V16H9V14H4Z" fill="white"/>
                                        </svg>
                                    </div>
                                    <div className='editor_opt'>
                                        <svg width="22" height="18" viewBox="0 0 22 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path fillRule="evenodd" clipRule="evenodd" d="M5 2C3.34315 2 2 3.34315 2 5V13C2 14.6569 3.34315 16 5 16H17C18.6569 16 20 14.6569 20 13V5C20 3.34315 18.6569 2 17 2H5ZM0 5C0 2.23858 2.23858 0 5 0H17C19.7614 0 22 2.23858 22 5V13C22 15.7614 19.7614 18 17 18H5C2.23858 18 0 15.7614 0 13V5Z" fill="white"/>
                                        <path fillRule="evenodd" clipRule="evenodd" d="M8.5073 5.1298C8.82081 4.95229 9.20557 4.95715 9.5145 5.14251L14.5145 8.14251C14.8157 8.32323 15 8.64874 15 9C15 9.35126 14.8157 9.67677 14.5145 9.85749L9.5145 12.8575C9.20557 13.0429 8.82081 13.0477 8.5073 12.8702C8.19379 12.6927 8 12.3603 8 12V6C8 5.63973 8.19379 5.30731 8.5073 5.1298ZM10 7.76619V10.2338L12.0563 9L10 7.76619Z" fill="white"/>
                                        </svg>
                                    </div>
                                    <div className='editor_opt'>
                                        <svg width="16" height="20" viewBox="0 0 16 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M10 0L16 6V18C16 18.5304 15.7893 19.0391 15.4142 19.4142C15.0391 19.7893 14.5304 20 14 20H2C1.46957 20 0.960859 19.7893 0.585786 19.4142C0.210714 19.0391 0 18.5304 0 18V2C0 1.46957 0.210714 0.960859 0.585786 0.585786C0.960859 0.210714 1.46957 0 2 0H10ZM14 18V7H9V2H2V18H14ZM9 8V10H7V15C7 15.5304 6.78929 16.0391 6.41421 16.4142C6.03914 16.7893 5.53043 17 5 17C4.46957 17 3.96086 16.7893 3.58579 16.4142C3.21071 16.0391 3 15.5304 3 15C3 14.4696 3.21071 13.9609 3.58579 13.5858C3.96086 13.2107 4.46957 13 5 13C5.4 13 5.7 13.1 6 13.3V8H9Z" fill="white"/>
                                        </svg>
                                    </div>
                                </div>

                                {/* For any click of editor opt depending on option the text will be added or image or etc*/}
                                {/* Note that the field of text,images/video and etc will be notes as textare */}
                                <div className="format_typingarea">
                                    {/* <div
                                        ref={editorRef}
                                        contentEditable
                                        onInput={handleInputChange}
                                        dangerouslySetInnerHTML={{ __html: editorState.content }}
                                    ></div> */}
                                    {content.map((elem,i) => {
                                        let contents;
                                        if (elem.type == 'bold') {
                                            contents = <p
                                                contentEditable="true"
                                                
                                                onInput={e => handleChangeContent(e,elem)}
                                                key={i}
                                                suppressContentEditableWarning={true}
                                                style={ { fontWeight:'bold' } }
                                            >
                                                {elem.value}
                                            </p>
                                        } else if (  elem.type == 'italic' ) {
                                            contents = <p
                                                contentEditable="true"
                                                onInput={e => handleChangeContent(e,elem)}
                                                key={i}
                                                suppressContentEditableWarning={true}
                                                style={ {  fontWeight:'lighter' } }
                                            >
                                                {elem.value}
                                            </p>
                                        } else if (  elem.type == 'code' ) {
                                            contents = <code
                                                contentEditable="true"
                                                onInput={e => handleChangeContent(e,elem)}
                                                key={i}
                                                suppressContentEditableWarning={true}
                                                style={ {  fontWeight:'lighter' } }
                                            >
                                                {elem.value}
                                            </code>
                                        } else if (  elem.type == 'image' ) {
                                            contents = <div
                                                contentEditable="true"
                                                onInput={e => handleChangeContent(e,elem)}
                                                key={i}
                                                suppressContentEditableWarning={true}
                                                style={ {  fontWeight:'lighter' } }
                                            >
                                                {elem.value}
                                            </div>
                                        }
                                        return (
                                            <>
                                                {contents}
                                            </>
                                        )
                                    })}
                                </div>

                            </div>
                        </div>
                        <div className="format_tags">
                            <div className="adder_tag">
                                <h6>
                                    Tags  
                                </h6>
                                <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M6 14V8H0V6H6V0H8V6H14V8H8V14H6Z" fill="white"/>
                                </svg>
                            </div>
                            <div className="adder_tag">
                                <h6>
                                    Status  
                                </h6>
                            </div>
                            <div className="adder_tag">
                                <h6>
                                    Discussion  
                                </h6>
                            </div>
                            <div className="adder_tag">
                                <h6>
                                    Prediction  
                                </h6>
                            </div>
                        </div>
                        <div className="submitter">
                            <h6>
                                {notifyPost}
                            </h6>
                            <button onClick={submitPost}>
                                Post
                            </button>
                        </div>
                    </div>
                </div>
                <div className="posting-rules">
                    <div className="rule-header">
                        <h4> Posting to Lazy-pot </h4>
                    </div>
                    <div className="list-r">
                        <h6> 1. Posting like a human </h6>
                    </div>
                    <div className="list-r">
                        <h6> 2. Be respectable </h6>
                    </div>
                    <div className="list-r">
                        <h6> 3. Read communities role </h6>
                    </div>
                    <div className="list-r">
                        <h6> 4. Don&apos;t be stupid just be dumb </h6>
                    </div>
                </div>
            </div>
        </>
    )
}

export default Post